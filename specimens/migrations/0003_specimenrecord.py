# Generated by Django 3.2.6 on 2021-08-12 14:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('taxonomy', '0002_auto_20210807_2253'),
        ('geography', '0006_alter_locality_name'),
        ('specimens', '0002_alter_person_last_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpecimenRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usi', models.CharField(help_text="Enter the specimen's unique identifier number", max_length=15, verbose_name='Unique Specimen Identifier')),
                ('determined_year', models.IntegerField()),
                ('sex', models.CharField(choices=[('M', 'male'), ('F', 'female'), ('U', 'unknown')], default='U', help_text="Select the specimen's sex", max_length=1)),
                ('stage', models.CharField(choices=[('egg', 'egg'), ('larva', 'larva'), ('nymph', 'nymph'), ('pupa', 'pupa'), ('adult', 'adult')], default='adult', help_text="Select the specimen's stage", max_length=10)),
                ('preparation', models.CharField(choices=[('spread', 'spread'), ('pinned', 'pinned'), ('minuten', 'minuten'), ('pointed', 'pointed'), ('envelope.', 'envelope'), ('container', 'container'), ('alcohol', 'alcohol')], default='spread', help_text="Select the specimen's preparation type", max_length=15)),
                ('preparation_date', models.DateField(blank=True, help_text='Enter the preparation date', null=True)),
                ('labels_printed', models.BooleanField(help_text='Are labels printed for the specimen?')),
                ('labeled', models.BooleanField(help_text='Is the specimen labeled?')),
                ('photographed', models.BooleanField(help_text='Is the specimen photographed?')),
                ('identified', models.BooleanField(help_text='Is the specimen identified to at least species?')),
                ('day', models.IntegerField(blank=True, help_text='Enter the day the specimen was collected, if known', null=True)),
                ('month', models.CharField(blank=True, choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], help_text='Select the month the specimen was collected, if known', max_length=10, null=True)),
                ('year', models.IntegerField(blank=True, help_text='Enter the year the specimen was collected, if known', null=True)),
                ('method', models.CharField(blank=True, help_text='Select the method used to collected the specimen', max_length=20, null=True)),
                ('weather', models.CharField(blank=True, help_text="Enter the weather conditions during the specimen's collection", max_length=100, null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text="Enter the temperature (F) during the specimen's collection if outdoors", max_digits=4, null=True)),
                ('time_of_day', models.CharField(blank=True, help_text="Enter the approximate time of the specimen's collection", max_length=50, null=True)),
                ('habitat', models.TextField(blank=True, help_text='Enter habitat details where the specimen was collected', null=True)),
                ('notes', models.TextField(blank=True, help_text='Enter any other notes about the specimen', null=True)),
                ('collecting_trip', models.ForeignKey(blank=True, help_text='Select the collecting trip during which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.collectingtrip')),
                ('country', models.ForeignKey(blank=True, help_text='Select the country in which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.country')),
                ('county', models.ForeignKey(blank=True, help_text='Select the county in which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.county')),
                ('determiner', models.ForeignKey(help_text='Select the person who determined the specimen', on_delete=django.db.models.deletion.CASCADE, related_name='specimen_determiners', to='specimens.person')),
                ('family', models.ForeignKey(blank=True, help_text="Select the specimen's family", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.family')),
                ('genus', models.ForeignKey(blank=True, help_text="Select the specimen's genus", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.genus')),
                ('gps', models.ForeignKey(blank=True, help_text='Select the GPS coordinates at which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.gps')),
                ('locality', models.ForeignKey(blank=True, help_text='Select the locality at which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.locality')),
                ('order', models.ForeignKey(blank=True, help_text="Select the specimen's order", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.order')),
                ('preparer', models.ForeignKey(help_text='Select the person who prepared the specimen', on_delete=django.db.models.deletion.CASCADE, related_name='specimen_preparers', to='specimens.person')),
                ('species', models.ForeignKey(blank=True, help_text="Select the specimen's species", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.species')),
                ('state', models.ForeignKey(blank=True, help_text='Select the state in which the specimen was collected', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specimens', to='geography.state')),
                ('subfamily', models.ForeignKey(blank=True, help_text="Select the specimen's subfamily", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.subfamily')),
                ('subspecies', models.ForeignKey(blank=True, help_text="Select the specimen's subspecies", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.subspecies')),
                ('tribe', models.ForeignKey(blank=True, help_text="Select the specimen's tribe", null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.tribe')),
            ],
            options={
                'ordering': ['usi'],
            },
        ),
    ]
